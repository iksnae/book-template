name: Build Book

on:
  push:
    # Run on any branch when book content changes
    paths:
      - 'book/**'
      - 'art/**'
      - 'templates/**'
      - 'build.sh'
      - 'package.json'
      - '.github/workflows/build-book.yml'
      - 'book.yaml'  # Configuration file
  workflow_dispatch:  # Allow manual triggering

# Permissions for creating releases and GitHub Pages
permissions:
  contents: write
  deployments: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      date: ${{ steps.version.outputs.date }}
      cover_found: ${{ steps.cover.outputs.cover_found }}
      book_title: ${{ steps.config.outputs.book_title }}
      book_author: ${{ steps.config.outputs.book_author }}
      file_prefix: ${{ steps.config.outputs.file_prefix }}
    steps:
      # Directly download the files we need without git
      - name: Create workspace and download files
        run: |
          # Create necessary directories
          mkdir -p .github/workflows
          mkdir -p book
          mkdir -p templates
          mkdir -p art
          
          # Download key files directly
          curl -s -o book.yaml https://raw.githubusercontent.com/${{ github.repository }}/main/book.yaml
          curl -s -o build.sh https://raw.githubusercontent.com/${{ github.repository }}/main/build.sh
          curl -s -o package.json https://raw.githubusercontent.com/${{ github.repository }}/main/package.json || echo '{"name":"book-template"}' > package.json
          curl -s -o README.md https://raw.githubusercontent.com/${{ github.repository }}/main/README.md || echo '# Book Template' > README.md
          curl -s -o .github/workflows/build-book.yml https://raw.githubusercontent.com/${{ github.repository }}/main/.github/workflows/build-book.yml
          
          # Make build script executable
          chmod +x build.sh
          
          # Create a dummy book-cli file
          echo '#!/usr/bin/env node' > book-cli
          echo '// Placeholder file to replace symlink' >> book-cli
          chmod +x book-cli
          
          # Create package-lock.json if it doesn't exist
          echo '{"name":"book-template","version":"1.0.0","lockfileVersion":3,"requires":true,"packages":{}}' > package-lock.json
          
          # List downloaded files
          echo "=== Downloaded Files ==="
          ls -la
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      # Load configuration from book.yaml if it exists
      - name: Load configuration
        id: config
        run: |
          if [ -f "book.yaml" ]; then
            echo "Using configuration from book.yaml"
            # Extract book title
            BOOK_TITLE=$(grep 'title:' book.yaml | head -n 1 | cut -d':' -f2- | sed 's/^[ \t]*//' | sed 's/"//g')
            echo "book_title=$BOOK_TITLE" >> $GITHUB_OUTPUT
            echo "BOOK_TITLE=$BOOK_TITLE" >> $GITHUB_ENV
            
            # Extract book author
            BOOK_AUTHOR=$(grep 'author:' book.yaml | head -n 1 | cut -d':' -f2- | sed 's/^[ \t]*//' | sed 's/"//g')
            echo "book_author=$BOOK_AUTHOR" >> $GITHUB_OUTPUT
            echo "BOOK_AUTHOR=$BOOK_AUTHOR" >> $GITHUB_ENV
            
            # Extract file prefix
            FILE_PREFIX=$(grep 'file_prefix:' book.yaml | head -n 1 | cut -d':' -f2- | sed 's/^[ \t]*//' | sed 's/"//g')
            if [ -n "$FILE_PREFIX" ]; then
              echo "file_prefix=$FILE_PREFIX" >> $GITHUB_OUTPUT
              echo "FILE_PREFIX=$FILE_PREFIX" >> $GITHUB_ENV
            else
              # Default to lowercase book title with hyphens
              FILE_PREFIX=$(echo "$BOOK_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g')
              echo "file_prefix=$FILE_PREFIX" >> $GITHUB_OUTPUT
              echo "FILE_PREFIX=$FILE_PREFIX" >> $GITHUB_ENV
            fi
          else
            echo "No book.yaml found, using default values"
            echo "book_title=My Book" >> $GITHUB_OUTPUT
            echo "BOOK_TITLE=My Book" >> $GITHUB_ENV
            echo "book_author=Author Name" >> $GITHUB_OUTPUT
            echo "BOOK_AUTHOR=Author Name" >> $GITHUB_ENV
            echo "file_prefix=my-book" >> $GITHUB_OUTPUT
            echo "FILE_PREFIX=my-book" >> $GITHUB_ENV
          fi
          
          # Print the configuration values for debugging
          echo "Book Title: $BOOK_TITLE"
          echo "Book Author: $BOOK_AUTHOR"
          echo "File Prefix: $FILE_PREFIX"

      - name: Set version and date
        id: version
        run: |
          VERSION=$(date +'v%Y.%m.%d-%H%M')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          DATE=$(date +'%B %d, %Y')
          echo "DATE=$DATE" >> $GITHUB_ENV
          echo "date=$DATE" >> $GITHUB_OUTPUT

      - name: Check for cover image
        id: cover
        run: |
          # Check for potential cover image locations
          if [ -d "art" ] && [ -f "art/cover.png" ]; then
            echo "COVER_IMAGE=art/cover.png" >> $GITHUB_ENV
            echo "✅ Found cover image at art/cover.png"
            echo "cover_found=true" >> $GITHUB_OUTPUT
          elif [ -d "book/images" ] && [ -f "book/images/cover.png" ]; then
            echo "COVER_IMAGE=book/images/cover.png" >> $GITHUB_ENV
            echo "✅ Found cover image at book/images/cover.png"
            echo "cover_found=true" >> $GITHUB_OUTPUT
          elif [ -d "book/en/images" ] && [ -f "book/en/images/cover.png" ]; then
            echo "COVER_IMAGE=book/en/images/cover.png" >> $GITHUB_ENV
            echo "✅ Found cover image at book/en/images/cover.png"
            echo "cover_found=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No cover image found, using default template cover"
            echo "COVER_IMAGE=templates/default/cover.png" >> $GITHUB_ENV
            echo "cover_found=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      # Directly download the files we need without git
      - name: Create workspace and download files
        run: |
          # Create necessary directories
          mkdir -p book
          mkdir -p templates
          mkdir -p art
          mkdir -p build
          mkdir -p build/images
          
          # Download key files directly
          curl -s -o book.yaml https://raw.githubusercontent.com/${{ github.repository }}/main/book.yaml
          curl -s -o build.sh https://raw.githubusercontent.com/${{ github.repository }}/main/build.sh
          curl -s -o package.json https://raw.githubusercontent.com/${{ github.repository }}/main/package.json || echo '{"name":"book-template"}' > package.json
          
          # Create package-lock.json if it doesn't exist
          echo '{"name":"book-template","version":"1.0.0","lockfileVersion":3,"requires":true,"packages":{}}' > package-lock.json
          
          # Make build script executable
          chmod +x build.sh
          
          # Create a dummy book-cli file
          echo '#!/usr/bin/env node' > book-cli
          echo '// Placeholder file to replace symlink' >> book-cli
          chmod +x book-cli
          
          # List downloaded files
          echo "=== Downloaded Files ==="
          ls -la
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          # Disable cache to avoid errors with the dynamically generated package-lock.json
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          # Create minimal package.json if needed
          if ! grep -q "dependencies" package.json; then
            echo "Creating minimal package.json with book-tools dependency"
            cat > package.json << EOF
{
  "name": "book-template",
  "version": "1.0.0",
  "description": "A template for creating books in multiple formats from markdown sources",
  "main": "index.js",
  "scripts": {
    "build": "book build",
    "build:interactive": "book interactive"
  },
  "dependencies": {
    "book-tools": "github:iksnae/book-tools"
  }
}
EOF
          fi
          
          # Install dependencies
          npm install --no-fund --no-audit
      
      - name: Prepare environment
        run: |
          # Create language directories based on what exists in the book/ folder
          for lang in $(ls -1 book/ 2>/dev/null || echo "en"); do
            if [ -d "book/$lang" ] && [ "$lang" != "images" ]; then
              echo "Creating build directory for language: $lang"
              mkdir -p "build/$lang"
              mkdir -p "build/$lang/images"
            fi
          done
          
          # Create en directory by default if it doesn't exist
          mkdir -p "build/en"
          mkdir -p "build/en/images"
          
          # Install necessary tools
          npm install -g calibre-cli || echo "Calibre installation skipped"

      - name: Run build script
        run: |
          echo "Running build script..."
          # Create minimal test content if book directory is empty
          if [ ! -d "book/en" ]; then
            mkdir -p book/en/chapter-01
            echo "# Test Chapter" > book/en/chapter-01/00-introduction.md
            echo "This is a test chapter for the build process." >> book/en/chapter-01/00-introduction.md
          fi
          
          # Run the build script
          ./build.sh --all-languages || echo "Build script completed with warnings"

      - name: List build directory contents
        run: |
          echo "=== Build Directory Contents ==="
          ls -la build/
          
          # List language-specific directories
          for lang in $(ls -1 build/ 2>/dev/null); do
            if [ -d "build/$lang" ] && [ "$lang" != "images" ]; then
              echo "=== $lang Directory Contents ==="
              ls -la "build/$lang/" || echo "Directory may be empty"
            fi
          done
          
          # Show file sizes for main book formats
          echo "=== Book File Sizes ==="
          find build/ -name "*.pdf" -o -name "*.epub" -o -name "*.mobi" -o -name "*.html" | xargs du -h 2>/dev/null || echo "Some files may be missing"

      - name: Create test files if build failed
        run: |
          # Check if any files were generated
          if [ $(find build/ -type f -name "*.pdf" -o -name "*.epub" -o -name "*.html" | wc -l) -eq 0 ]; then
            echo "No output files found, creating test files for debugging"
            echo "<html><body><h1>Test Book</h1><p>This is a test file.</p></body></html>" > build/write-and-publish.html
            touch build/write-and-publish.pdf
            touch build/write-and-publish.epub
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: book-files
          path: |
            build/*.pdf
            build/*.epub
            build/*.mobi
            build/*.html
            build/*.md
            build/*/
            build/images/

  release:
    # Only run release job on main branch
    if: github.ref == 'refs/heads/main'
    needs: [setup, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: book-files
          path: build

      - name: List build directory contents
        run: |
          echo "=== Build Directory Contents ==="
          ls -la build/
          
          # List all PDF, EPUB, and MOBI files
          echo "=== Book File Sizes ==="
          find build/ -name "*.pdf" -o -name "*.epub" -o -name "*.mobi" | xargs du -h 2>/dev/null || echo "Some files may be missing"

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/*.pdf
            build/*.epub
            build/*.mobi
            build/*.html
          tag_name: ${{ needs.setup.outputs.version }}
          name: ${{ needs.setup.outputs.book_title || 'Book Template' }} ${{ needs.setup.outputs.version }}
          body: |
            # ${{ needs.setup.outputs.book_title || 'Book Template' }}
            
            By ${{ needs.setup.outputs.book_author || 'Template Author' }}
            Built on ${{ needs.setup.outputs.date }}
            
            ## 📚 Download Options
            
            | Format | Description | Link |
            |--------|-------------|------|
            | 📄 PDF | For reading on computers and printing | [Download PDF](https://github.com/${{ github.repository }}/releases/download/${{ needs.setup.outputs.version }}/${{ needs.setup.outputs.file_prefix || 'write-and-publish' }}.pdf) |
            | 📱 EPUB | For most e-readers and mobile devices | [Download EPUB](https://github.com/${{ github.repository }}/releases/download/${{ needs.setup.outputs.version }}/${{ needs.setup.outputs.file_prefix || 'write-and-publish' }}.epub) |
            | 📚 MOBI | For Kindle devices | [Download MOBI](https://github.com/${{ github.repository }}/releases/download/${{ needs.setup.outputs.version }}/${{ needs.setup.outputs.file_prefix || 'write-and-publish' }}.mobi) |
            | 🌐 HTML | Read online in your browser | [View HTML](https://github.com/${{ github.repository }}/releases/download/${{ needs.setup.outputs.version }}/${{ needs.setup.outputs.file_prefix || 'write-and-publish' }}.html) |
            
            ## 🔄 Web Version
            
            The latest version is also available online at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/
          draft: false

  deploy:
    # Only run deploy job on main branch
    if: github.ref == 'refs/heads/main'
    needs: [build, release]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: book-files
          path: build

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: build
          branch: gh-pages